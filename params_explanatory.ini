## What do we need to compute?

# The possibilities are vinfall, vinfall_isolation
# modality = vinfall
modality = vinfall_isolation

## Root of output files
root = ./test_

## Cuts.  Each of these entries should be a comma-separated list of values.
## For each column to cut, there should be two entries in the 'cuts' field,
## corresponding to the minimum and maximum respectively of the allowed range
## for that column.
## The columns are being indexed from 1.
## Example:
## columns_to_cut = 7,8
## cuts = 700,1000, 10,inf
## will only select those lines of the input file where
## 700 < column(7) < 1000
## column(8) > 10
columns_to_cut = 1,6
cuts = -inf,inf,-10,10

# TODO: Implement the following two lines.
# Doing so will allow an easier naming of files using the Python script.
# column_names=x,y,z,velX,velY,velZ,type,np,mvir,stellarMass,rMag,rDust
# column_names_to_cut=np

## Format for the input catalog files.
# If you have a single file, just write its path here, and specify n_box_bins=1 below.
# If you split your data in many data blocks, Zelda will try to read the blocks based
# on their filenames.  Zelda expects that you divided the data in a 3D grid, where
# each file corresponds to one bin.  The file associated to a bin should contain
# the 3 numbers corresponding to the index of the bin, starting from 1.  The
# input_format field should be the path of a block-file with the specifier %d as
# a placeholder for those three numbers.
# For example, if you split the data in the files:
# data/gal_blocks_1_1_1.dat,  data/gal_blocks_1_1_2.dat, data/gal_blocks_1_2_1.dat, etc.
# you need to specify input_format = data/gal_blocks_%d_%d_%d.dat
input_format = /Users/coccoinomane/data/ap/galaxies/x_y_z_vx_vy_vz/data_blocks_n5_guo2010_z0/gal_blocks_%d_%d_%d.dat

# 'n_box_bins' should be the number of bins in which each side of the simulation box is splitted.
# If you splitted the simulation into 1000 blocks, set n_box_bins=10.  If you did not split the
# simulation, set n_box_bins=1.  Consider that the latter setting may take a lot of time if you try to compute
# N^2 statistics (e.g. when 'modality' is set to 'vinfall').
# Only the first (n_box_bins)^3 data blocks will be read, so if you set n_box_bins=2, you will read
# only 8 blocks.  This is useful for debugging.  Note that 'n_box_bins' is also used to determine
# the length of the side of the blocks, which in turn is used to remove the edge effects.
n_box_bins = 1

## Parameters used to remove the edge effects. They have no other use.
# Remove galaxies that are with a distance of 'r_isolation' from the edges of the block;
# It applies only when modality=vinfall_isolation.  Note that this only works when the
# 1st block starts has its lower-left corner in x=0,y=0,z=0.
remove_galaxies_on_the_edges = n   
side_of_box = 500

# Name of the file where Zelda will store the final results
results_filename = results_guo2010_z0_log_r1e-3to170_nbins200_nblocks125_test.dat

## Parameters for the isolation criteria.
# If not present, it is set to r_max.
# r_isolation = 4

# Maximum number of neighbours (read only in VINFALL_ISOLATION mode).
# The definition of the maximum number of neighbours is crucial and non-trivial.  Here
# we use the convention that 'n_max' is the maximum number of neighbours each galaxy in
# the pair can have.  Therefore:
# - If n_max=0,  the program will throw an error, because no neighbours at all means that
#   no pairs can be found.
# - If n_max=1,  each galaxy can only have 1 neighbour (i.e. the other galaxy in the pair)
#   which means that we are selecting completely isolated pairs.
# - If n_max=2,  each galaxy can have up to 2 neighbours, which means that we are selecting
#   pairs that have 0, 1 or 2 neighbours in total.  The pair will have 1 neighbour if (i)
#   one galaxy has 0 other neighbours, and the other galaxy has 1, (ii) both galaxies have one
#   other neighbour, which is in common.  The pair will have 2 neighbours only if
#   both galaxies have one other neighbour, which is disjoint.
# - For arbitrary 'n_max',  we select pairs that have 0, 1, ..., 2*n_max-2 neighbours.
#   The pair will have 2*n_max-2 neighbours only if both galaxies have 'n_max-1' other neighbours
#   that are completely disjoint (i.e. the set of the 'n_max-1' neighbours of 'i_gal' has 
#   zero intersection with the set of 'n_max-1' neighbours of 'j_gal')
n_neighbours_max = 0

## Separation binning.
# Distances should be provided in whatever distance units the input file is.
# The binning_mode can be either 'lin' (for linear binning), 'log' (for logarithmic binning) or
# 'custom'.
# In 'custom' mode, you need to provide a comma separated list of bin edges in the field 'custom_bin_edges'.
# The midpoints are computed linearly from these, unless you want to specify them explicitely in the field
# 'custom_bin_midpoints'.  r_min, r_max and n_separation_bins are computed from the list of edges, therefore
# the values you specify for them here are ignored.
r_min = 1e-3
r_max = 170
n_separation_bins = 200
binning_mode = lin
# Example of custom binning with 5 bins, half linearly and half logarithmically spaced.
# binning_mode = custom
# custom_bin_edges =      3,5,7,70,700,7000
# custom_bin_midpoints =   4,6,15,150,1500



# How many lines will be read from each block file.  Set it to zero to read all the file
# Useful for quick debug.
n_gals_per_block = 0

## Should Zelda store the results found for each block?
store_blocks_results = n
output_format = /Users/coccoinomane/data/ap/results/guo2010/vinfall_blocks_guo2010_z0_log_r1e-3to170_nbins200/vinfall_%d_%d_%d.dat

## Verbosity
verbose = 2

## Do you want to have all input/precision parameters which have been read written in file '<root>parameters.ini',
## and those not written in file '<root>unused_parameters' ? If 'write parameters' is set to something containing
## the letter 'y' or 'Y', file written, otherwise not written (default: not written)
write parameters = nope